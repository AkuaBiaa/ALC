<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Mini App</title>
    <style>
      
      body {
        margin: 0;
        padding: 1em;
        background-color: white;
      }
      
      [data-cart-info],
      [data-credit-card] {
        transform: scale(0.78);
    	margin-left: -3.4em;
      }
      
      [data-card-type] {
        display: block;
        width: 120px;
        height: 60px;
      }

      [data-cc-info] input:focus,
      [data-cc-digits] input:focus {
        outline: none;
      }

      .mdc-card__primary-action,
      .mdc-card__primary-action:hover {
        cursor: auto;
        padding: 20px;
        min-height: inherit;
      }
      
      [data-credit-card] [data-card-type] {
        transition: width 1.5s;
        margin-left: calc(100% - 130px);
      }
      
      [data-credit-card].is-visa {
        background: linear-gradient(135deg, #622774 0%, #c53364 100%);
      }

      [data-credit-card].is-mastercard {
        background: linear-gradient(135deg, #65799b 0%, #5e2563 100%);
      }

      .is-visa [data-card-type],
      .is-mastercard [data-card-type] {
        width: auto;
      }

      input.is-invalid,
      .is-invalid input {
        text-decoration: line-through;
      }

      ::placeholder {
        color: #fff;
      }
      
      div[data-cc-digits] input{
        color: white;
        font-size: 2em;
        line-height: 2em;
        margin-right:0.5em;
      }
    </style>
  </head>
  <body>
    <div data-cart-info>
      <heading class="mdc-typography--headline4">
        <span class="material-icons" style="display: inline-block; vertical-align: middle; font-size: 150px;">shopping_cart</span>
        <span data-bill style="display: inline-block; vertical-align: middle;"></span>
      </heading>
    </div>
    <div data-credit-card class="mdc-card""mdc-card--outlined" style="width: 435px; min-height: 240px; border-radius: 10px; background-color: #5d6874;">
      <div class="mdc-card__primary-action">
        <img data-card-type src="https://placehold.it/120x60.png?text=Card"></img>
     
      <div data-cc-digits style="margin-top: 2em;">
        <input type="text" size="4" placeholder="----" style="color: white; font-size: 2em; line-height: 2em; margin-right: 0.5em; border: none; background: none;"></input>
      	<input type="text" size="4" placeholder="----" style="color: white; font-size: 2em; line-height: 2em; margin-right: 0.5em; border: none; background: none;"></input>
    	<input type="text" size="4" placeholder="----" style="color: white; font-size: 2em; line-height: 2em; margin-right: 0.5em; border: none; background: none;"></input>
  		<input type="text" size="4" placeholder="----" style="color: white; font-size: 2em; line-height: 2em; margin-right: 0.5em; border: none; background: none;"></input>
      </div>

      <div data-cc-info style="margin-top: 1em;">
        <input type="text" size="20"placeholder="Name Surname" style="color: white; font-size: 1.2em; border: none; background: none;"></input>
		<input type="text" size="6" placeholder="MM/YY" style="color: white; font-size: 1.2em; border: none; background: none; padding-right: 10px; float: right;"></input>
      </div>
	  </div>
	</div>
	<button data-pay-btn class="mdc-button" style="position: fixed; width: 90%; border: 1px solid; bottom: 20px; ">Pay &amp; Checkout Now</button>
  
    <script>
      const supportedCards = {
        visa, mastercard
      };
      
      const countries = [
        {
          code: "US",
          currency: "USD",
          country: 'United States'
        },
        {
          code: "NG",
          currency: "NGN",
          country: 'Nigeria'
        },
        {
          code: 'KE',
          currency: 'KES',
          country: 'Kenya'
        },
        {
          code: 'UG',
          currency: 'UGX',
          country: 'Uganda'
        },
        {
          code: 'RW',
          currency: 'RWF',
          country: 'Rwanda'
        },
        {
          code: 'TZ',
          currency: 'TZS',
          country: 'Tanzania'
        },
        {
          code: 'ZA',
          currency: 'ZAR',
          country: 'South Africa'
        },
        {
          code: 'CM',
          currency: 'XAF',
          country: 'Cameroon'
        },
        {
          code: 'GH',
          currency: 'GHS',
          country: 'Ghana'
        }
      ];
      
      const appState = {}
      
      /*const formatAsMoney = (amount, buyerCountry) => {
        let code = 'US';
        let currently = 'USD';
       for (let i = 0; i < countries.length; i++) {
         if (buyerCountry === countries[i].country) {
           code = countries[i].code;
           currency = countries[i].currency;
         }
       }
        return amount.toLocaleString(code, {style: 'currency', currency})
      };*/
      
      const formatAsMoney = (amount, buyerCountry) => {
       const obj = countries.find(c=>c.country === buyerCountry);
        if(obj == undefined){
         return amount.toLocaleString('en-us',{
            currency:'USD',
            style:'currency'
          });
          }
        return amount.toLocaleString(`en-${obj.code}`,{
          currency:obj.currency,
          style:'currency'
        });
        };
      
      const flagIfInvalid = (field,isValid)=>{
        if(isValid){
          field.classList.remove('is-invalid');
        }else{
          field.classList.add('is-invalid');
        }
      };
      
      const flagIfInvalid = (field, isValid) => {
        if (isValid) {
          field.classList.remove('is-invalid');
        } else {
          field.classList.add('is-invalid');
        }
      };
      
      /*const expiryDateFormatIsValid = (target) => {
        const exp = /0?[1-9]|1[0-2]\/(\d{2})/;
        if (target.match(pattern)){
          return true
        } else
          return false;
      };
      */
      
      const expiryDateFormatIsValid = (target)=>{
        const regex = /[0-9]{2}[\/]{1}[0-9]{2}$/g;
        const dateArray = target.split("/");
        if(regex.test(target) && dateArray.length == 2){
          return true;
        } else {
          return false;
        }
      };
      
      const detectCardType = ({target}) => {
        if (target.value.startsWith ("4")) {
          document.querySelector('[data-credit-card]').classList.remove("is-mastercard");
          document.querySelector('[data-credit-card]').classList.add("is-visa");
          document.querySelector('[data-card-type]').src = ("src", supportedCards.visa);
          return "is-visa"
          
        } else if (target.value.startsWith("5")){
          document.querySelector('[data-credit-card]').classList.remove("is-visa");
          document.querySelector('[data-credit-card]').classList.add("is-mastercard");
          document.querySelector('[data-card-type]').src = ("src", supportedCards.mastercard);
          return "is-mastercard"
        }
      };
      
      /*const validateCardExpiryDate = ({target}) => {
        if (target == expiryDateFormatIsValid(target)) {
          flagIfInvalid(target, isValid);
          return true
        } else {
          return false;
        }
      };
      */
      
      const validateCardExpiryDate = ({target})=>{
          const currentDate = new Date();
        const month = target.value.split('/')[0];
        const year = target.value.split('/')[1];
        const futureDate = new Date(`${month}/01/${year}`);
          if(expiryDateFormatIsValid(target.value) && futureDate > currentDate){
            flagIfInvalid(target,true);
            return true;
          } else{
            flagIfInvalid(target,false);
            return false;
          } 
      };
      
      const validateCardHolderName = ({ target })=>{
        const name = target.value.split(" ");
        const firstName = name[0];
        const lastName = name[1];
        const isValid = name.length === 2 && firstName.length && lastName.length >=3;
        flagIfInvalid(target, isValid);
        return isValid;
      };
      
      /*const validateCardHolderName = ({target}) => {
        const holderName = target.value;
        const nameArray = holderName.split(" ");
        
        if(nameArray[0].length >= 3 && nameArray[1].length >= 3) {
          flagIfInvalid(target, true);
          return true;
        } else {
          flagIfInvalid(target, false);
          return false;
        }
      };
      */
      
     /*const validateWithLuhn = (digits) => {
        
        let digitArr = digits.slice(0).reverse();
        let sumAll = digitArr.reduce((acc,val,j) => (j % 2 == 0 ? acc + val : acc + (val * 2 > 9 ? val * 2 - 9 : val * 2), 0));
        return sumAll % 10 === 0;
      }; */
      
      const validateWithLuhn = (digits) => {
      let valueArr = digits.join("");
      if (/[^0-9\s]+/.test(valueArr)) return false;
      let numCheck = 0;
      let numDigit = 0;
      let numEven = 0;
      
      valueArr = valueArr.replace(/\D/g,"");
      for (let n = valueArr.length - 1; n >= 0; n--) {
      let cardDigit = valueArr.charAt(n);
      let numDigit = parseInt(cardDigit, 10);
      
      if (numEven) {
      if ((numDigit *= 2) > 9) numDigit -= 9}
      
      numCheck += numDigit;
      numEven =! numEven;
      }
      
      return (numCheck % 10) == 0;
      };
      
       
      /*const validateCardNumber = () => {
        if (validateWithLuhn(digits)) {
          document.querySelector('[data-cc-digits]').classList.remove('is-invalid');
          return true;
          
        } else {
          document.querySelector('[data-cc-digits]').classList.add('is-invalid');
          return false
        }
      };*/
      
      const validateCardNumber = ()=>{     
    let firstValue = document.querySelector('[data-cc-digits] input:nth-child(1)').value.split('');
     let secondValue = document.querySelector('[data-cc-digits] input:nth-child(2)').value.split(''); ;
     let thirdValue = document.querySelector('[data-cc-digits] input:nth-child(3)').value.split('');
     let fourthValue = document.querySelector('[data-cc-digits] input:nth-child(4)').value.split('');
     let digits = firstValue.concat(secondValue,thirdValue,fourthValue);
     let valid = validateWithLuhn(digits);
         if(valid) {
          document.querySelector("[data-cc-digits]").classList.remove("is-invalid");
          
        } else {
          document.querySelector("[data-cc-digits]").classList.add("is-invalid");
             }
        return valid;
      };
      
      const uiCanInteract = () => {
        document.querySelector('[data-cc-digits] input:nth-child(1)').addEventListener('blur', detectCardType);
        document.querySelector('[data-cc-info] input:nth-child(1)').addEventListener('blur', validateCardHolderName);
        document.querySelector('[data-cc-info] input:nth-child(2)').addEventListener('blur', validateCardExpiryDate);
        document.querySelector('[data-pay-btn]').addEventListener('click', validateCardNumber);
        document.querySelector('[data-cc-digits] input:nth-child(1)').focus();
      };
      
      /*const displayCartTotal = ({results}) => {
        const [data] = results;
        const {itemsInCart, buyerCountry} = data;
        
        appState.items = itemsInCart;
        appState.country = buyerCountry;
        
        appState.bill = itemsInCart.reduce((total, item) => {return total + (item.qty * item.price);}, 0);
        
        /*appState.bill = itemsInCart.reduce(({qty, price}) => (qty * price));
        
        appState.billFormatted = formatAsMoney(appState.bill, appState.country);
        
        document.querySelector("[data-bill]").textContent = appState.billFormatted;
        uiCanInteract();
      };
      */
      
      const displayCartTotal = ({results})=>{
        const [data] = results;
        const {itemsInCart,buyerCountry} = data;
        appState.items = itemsInCart;
        appState.country = buyerCountry;
        
        appState.bill = itemsInCart.reduce( (totalBill, item)=>{
          totalBill += + (item.price*item.qty);
          return totalBill;
        },0);
        appState.billFormatted = formatAsMoney(appState.bill,appState.country);
        document.querySelector("[data-bill]").textContent = appState.billFormatted;
        uiCanInteract();
      };
    
      
      
      const fetchBill = () => {
        const api = 'https://randomapi.com/api/006b08a801d82d0c9824dcfdfdfa3b3c';
        fetch(api)
        .then(response => response.json())
        .then(data => displayCartTotal(data))
        .catch(error => console.log(error));
      };
      
      const startApp = () => {
        fetchBill()
      };
      
      startApp();
      
    </script>
  </body>
</html>

